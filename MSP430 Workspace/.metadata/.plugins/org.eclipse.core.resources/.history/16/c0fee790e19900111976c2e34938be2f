//***************************************************************************************
//  MSP430G2452: SRF PLL Design and Optimization
//
//  Sambhav R Jain
//  Pradhyumna Ravikirthi
//  NIT Trichy
//  May 2012
//  Built with Code Composer Studio v5
//***************************************************************************************


/*
 * ======== Standard MSP430 includes ========
 */
#include <msp430.h>

/*
 * ======== Grace related includes ========
 */
#include <ti/mcu/msp430/csl/CSL.h>

/*
 *  ======== main ========
 */

// Global Variables
int vgrid[3];


// va is connected to ADC channel A2 --> DTC stores in vgrid[0] (10 bit)
// vb is connected to ADC channel A1 --> DTC stores in vgrid[1] (10 bit)
// vc is connected to ADC channel A0 --> DTC stores in vgrid[2] (10 bit)

int main(int argc, char *argv[])
{
    CSL_init();					// Activate Grace-generated configuration

    float kp = -1.526099;
    float ki = -265.691088;
    float Ts = 0.3125e-3;	// Sampling period is set to take 64 samples in 1 cycle (50Hz)
    float Ki = Ts*ki*0.5;
    float wff = 314.15926;

    float va,vb,vc;
    float valpha,vbeta;
    float vd,vq;

    int i = 0;
    float delw,w;

    float thetatemp = 0;	// theta delayed by unit sample delay
    float theta = 0;		// assigned as zero for the first iteration only
    float vdtemp = 0;		// vd delayed by unit sample delay
	float delwtemp = 0;
	float wtemp = wff;

    //------------------------------------------------------------------------------
    // Flash - 8-bit Sine Lookup table with 64 points
    //------------------------------------------------------------------------------
    const char sin[64] = { 128, 140, 153, 165, 177, 188, 198, 209, 218, 226,
    		234, 240, 245, 250, 253, 254, 255, 254, 253, 250, 245, 240, 234, 226,
    		218, 209, 199, 188, 177, 165, 153, 140, 128, 116, 103, 91, 79, 68, 57,
    		47, 38, 30, 22, 16, 11, 6, 3, 2, 1, 2, 3, 6, 11, 16 ,22, 30, 38, 47, 57,
    		68, 79, 91, 103, 116 };

//    const float sin[64] = {0, 0.0980, 0.1951, 0.2903, 0.3827, 0.4714, 0.5556, 0.6344, 0.7071, 0.7730, 0.8315, 0.8819, 0.9239,
//    		0.9569, 0.9808, 0.9952, 1, 0.9952, 0.9808, 0.9569, 0.9239, 0.8819, 0.8315, 0.7730, 0.7071,
//    		0.6344, 0.5556, 0.4714, 0.3827, 0.2903, 0.1951, 0.0980, 0, -0.0980, -0.1951, -0.2903, -0.3827,
//    		-0.4714, -0.5556, -0.6344, -0.7071, -0.7730, -0.8315, -0.8819, -0.9239, -0.9569, -0.9808, -0.9952,
//    		-1, -0.9952, -0.9808, -0.9569, -0.9239, -0.8819, -0.8315, -0.7730, -0.7071, -0.6344, -0.5556,
//    		-0.4714, -0.3827, -0.2903, -0.1951, -0.0980};

    //------------------------------------------------------------------------------
    // Flash - 8-bit Cosine Lookup table with 64 points
    //------------------------------------------------------------------------------
    const char cos[64] = { 255, 254, 253, 250, 245, 240, 234, 226,
    		218, 209, 199, 188, 177, 165, 153, 140, 128, 116, 103, 91, 79, 68, 57,
    		47, 38, 30, 22, 16, 11, 6, 3, 2, 1, 2, 3, 6, 11, 16 ,22, 30, 38, 47, 57,
    		68, 79, 91, 103, 116, 128, 140, 153, 165, 177, 188, 198, 209, 218, 226,
    		234, 240, 245, 250, 253, 254 };

    while(1){

    	// Configure DTC
        ADC10CTL0 &= ~ENC;
        while (ADC10CTL1 & BUSY);               // Wait till ADC10 core is active
        ADC10SA = (short) vgrid;				// Data transfer start at starting address of array vgrid

        // ADC Start Sampling and Conversion - Software trigger
    	ADC10CTL0 |= ENC + ADC10SC;

    	// Loop until ADC10IFG is set indicating ADC conversion sequence is complete
    	while ((ADC10CTL0 & ADC10IFG) == 0);

    	// To scale the 10-bit (0 to 1023) digital value to (-511 to 512) then to analog volts (230sqrt(2)V at 512 and -230sqrt(2)V at -511)
//    	va = (vgrid[0]-511)*0.6352912;
//    	vb = (vgrid[1]-511)*0.6352912;
//    	vc = (vgrid[2]-511)*0.6352912;
    	va = (vgrid[0]-511)*0.6353;
    	vb = (vgrid[1]-511)*0.6353;
    	vc = (vgrid[2]-511)*0.6353;

    	vbeta = 0.6667*va - 0.333*(vb+vc);
    	valpha = 0.5773*(vc-vb);

    	// Convert theta to index by multiplying by 64/(2*pi)
//    	i = 10.18591636*theta;
    	i = 10.1859*theta;

    	// Dividing sine and cosine by 127
    	vq = (cos[i]-128)*7.874e-3*vbeta - (sin[i]-128)*7.874e-3*valpha;
    	vd = (sin[i]-128)*7.874e-3*vbeta + (cos[i]-128)*7.874e-3*valpha;

    	delw = (kp+Ki)*vd + (Ki-kp)*vdtemp + delwtemp;
    	w = delw + wff;
    	theta = 0.5*Ts*(w + wtemp) + thetatemp;

    	if(theta >= 6.283)
    		theta = 0;

    	vdtemp = vd;
    	thetatemp = theta;
    	delwtemp = delw;
    	wtemp = w;

    	// (v+230*sqrt(2))*1023/(2*230*sqrt(2)) --> Output is made to range between 0 to 1023
//    	TA0CCR1 = (vd+325.2691)*1.57254399;		// P2.6
//    	TA1CCR1 = (vq+325.2691)*1.57254399;		// P2.1
    	TA0CCR1 = (vd+325.2691)*1.5725;		// P2.6
//    	TA0CCR1 = (vq+325.2691)*1.5725;		// P2.6

    	// theta*1023/(2*pi)
		TA0CCR2 = theta*162.8155;				// P1.4

//    	TA0CCR1 = vgrid[0]; // v_a (A2) phase at P2.6
//    	TA0CCR2 = vgrid[1]; // v_b (A1) phase at P1.4

    	//__delay_cycles(150); 	// 0.3125e-4 - 21.5us = delay = 4876 clocks of 16MHz

    }

    return (0);
}

//		// PWM Outputs
//    	TA0CCR1 = o/p_1 (Pin 2.6)
//		TA0CCR2 = o/p_2 (Pin 1.4)
